@model TestProgrammasy.DTOs.CreateTestDTO
@using System.Security.Claims
@{
    ViewData["Title"] = "Testi Döretmek";
}

<div class="card">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h3 class="mb-0">Täze Test Döretmek</h3>
    </div>
    <div class="card-body">
        <div class="mb-4">
            <div class="file-upload-wrapper">
                <div class="file-upload-card">
                    <div class="text-center p-4 upload-content">
                        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" class="bi bi-cloud-arrow-up text-primary mb-3" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708l2-2z" />
                            <path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z" />
                        </svg>
                        <h5 class="mb-2">Test faýlyny ýüklemek üçin basyň</h5>
                        <p class="text-muted mb-3">ýa-da faýly şu ýere süýräp getiriň</p>
                        <input type="file" id="testFileInput" accept=".txt" class="file-input" />
                        <label for="testFileInput" class="btn btn-primary px-4">
                            Faýly saýlaň
                        </label>
                        <p class="selected-file mt-3 text-success" style="display: none;"></p>
                    </div>
                </div>
            </div>
        </div>
        <form asp-action="Create" method="post">
            <div class="row">
                <input type="hidden" name="UserId" value=@User.FindFirstValue(ClaimTypes.NameIdentifier) />
                <div class="col-md-4">
                    <div class="form-group mb-3">
                        <label asp-for="Name" class="form-label">Test ady</label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group mb-3">
                        <label asp-for="Type" class="form-label">Dersi saýlaň</label>
                        <select asp-for="Type" class="custom-select">
                            <option value=""></option>
                            <option value="Türkmen dili">Türkmen dili</option>
                            <option value="Edebiýat">Edebiýat</option>
                            <option value="Matematika">Matematika</option>
                            <option value="Fizika">Fizika</option>
                            <option value="Himiýa">Himiýa</option>
                            <option value="Biologiýa">Biologiýa</option>
                            <option value="Geografiýa">Geografiýa</option>
                            <option value="Taryh">Taryh</option>
                            <option value="Zähmet">Zähmet</option>
                            <option value="Informatika">Informatika</option>
                            <option value="Tehnologiýa">Tehnologiýa</option>
                            <option value="Rus dili">Rus dili</option>
                            <option value="Bedenterbiýe">Bedenterbiýe</option>
                            <option value="Şekillendiriş sungaty">Şekillendiriş sungaty</option>
                            <option value="Iňlis dili">Iňlis dili</option>
                            <option value="Kommunikasiýa">Kommunikasiýa</option>
                            <option value="Astronomiýa">Astronomiýa</option>
                            <option value="Algebra">Algebra</option>
                            <option value="Geometriýa">Geometriýa</option>
                            <option value="Matematiki modelirleme">Matematiki modelirleme</option>
                        </select>
                        <span asp-validation-for="Type" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="form-group mb-3">
                        <label asp-for="Description" class="form-label">Giňişleýin</label>
                        <input asp-for="Description" class="form-control" />
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
                
                <div class="col-md-2">
                    <div class="form-group mb-3">
                        <label asp-for="Level" class="form-label">Derejesini saýlaň</label>
                        <select asp-for="Level" class="custom-select">
                            <option value=""></option>
                            <option value="Ýönekeý">Ýönekeý</option>
                            <option value="Orta">Orta</option>
                            <option value="Çylşyrymly">Çylşyrymly</option>
                        </select>
                        <span asp-validation-for="Level" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group mb-3">
                        <label asp-for="TimeLimit" class="form-label">Wagty(minutda)</label>
                        <input asp-for="TimeLimit" class="form-control" />
                        <span asp-validation-for="TimeLimit" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div id="questions-container">
                <!-- Questions will be added here dynamically -->
            </div>

            <button type="button"
                    class="btn btn-secondary"
                    onclick="addQuestion()">
                Sorag goş
            </button>

            <div class="mt-4">
                <button type="submit" class="btn btn-primary">Testi ýatda sakla</button>
                <a asp-action="Index" class="btn btn-light">Yza gaýt</a>
            </div>
        </form>
    </div>
</div>
@section Styles {
    <style>
        .file-upload-wrapper {
            width: 100%;
            margin-bottom: 1rem;
        }

        .file-upload-card {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            background-color: #f8f9fa;
            transition: all 0.3s ease;
        }

            .file-upload-card:hover {
                border-color: #0d6efd;
                background-color: #f1f8ff;
            }

        .upload-content {
            position: relative;
        }

        .file-input {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

        .selected-file {
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }
    </style>
}
@section Scripts {
    <script>
        function addQuestion() {
            const questionCount = document.querySelectorAll('.question-block').length;
            const questionHtml = `
                <div class="question-block card mb-4">
                    <div class="card-body">
                        <div class="form-group">
                            <label>Sorag №${questionCount + 1}</label>
                            <textarea name="Questions[${questionCount}].QuestionText"
                                    class="form-control"
                                    rows="2"></textarea>
                        </div>

                        <div class="answers-container">
                            <div class="answer-row d-flex align-items-center mb-2">
                                <div class="form-check mr-2 d-flex align-items-center">
                                    <input type="radio"
                                           name="Questions[${questionCount}].CorrectAnswerIndex"
                                           value="0"
                                           checked
                                           class="form-check-input" />
                                </div>
                                <div class="flex-grow-1">
                                    <input name="Questions[${questionCount}].Answers[0].AnswerText"
                                           class="form-control"
                                           placeholder="Jogap warianty" />
                                    <input type="hidden"
                                           name="Questions[${questionCount}].Answers[0].Order"
                                           value="0" />
                                </div>
                                <button type="button"
                                        class="btn btn-danger btn-sm ml-2"
                                        onclick="removeAnswer(this)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <div class="mt-2">
                            <button type="button"
                                    class="btn btn-secondary btn-sm"
                                    onclick="addAnswer(${questionCount})">
                                Jogap goş
                            </button>
                            <button type="button"
                                    class="btn btn-danger btn-sm"
                                    onclick="removeQuestion(this)">
                                Sоrаgy poz
                            </button>
                        </div>
                    </div>
                </div>`;

            document.getElementById('questions-container').insertAdjacentHTML('beforeend', questionHtml);
        }

        function addAnswer(questionIndex) {
            const answersContainer = document.querySelectorAll('.answers-container')[questionIndex];
            const answerCount = answersContainer.querySelectorAll('.answer-row').length;

            const answerHtml = `
                <div class="answer-row d-flex align-items-center mb-2">
                    <div class="form-check mr-2 d-flex align-items-center">
                        <input type="radio"
                               name="Questions[${questionIndex}].CorrectAnswerIndex"
                               value="${answerCount}"
                               class="form-check-input" />
                    </div>
                    <div class="flex-grow-1">
                        <input name="Questions[${questionIndex}].Answers[${answerCount}].AnswerText"
                               class="form-control"
                               placeholder="Jogap warianty" />
                        <input type="hidden"
                               name="Questions[${questionIndex}].Answers[${answerCount}].Order"
                               value="${answerCount}" />
                    </div>
                    <button type="button"
                            class="btn btn-danger btn-sm ml-2"
                            onclick="removeAnswer(this)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                        </svg>
                    </button>
                </div>`;

            answersContainer.insertAdjacentHTML('beforeend', answerHtml);
        }

        function removeQuestion(button) {
            if (confirm('Sораgy pozmak isleýärsiňizmi?')) {
                button.closest('.question-block').remove();
                updateQuestionNumbers();
                updateAllQuestionsIndexes();
            }
        }

        function removeAnswer(button) {
            if (confirm('Jogaby pozmak isleýärsiňizmi?')) {
                const answerRow = button.closest('.answer-row');
                const questionBlock = answerRow.closest('.question-block');
                answerRow.remove();
                updateAnswerIndexes(questionBlock);
            }
        }

        function updateQuestionNumbers() {
            document.querySelectorAll('.question-block').forEach((block, index) => {
                block.querySelector('label').textContent = `Sorag №${index + 1}`;
                updateQuestionIndexInNames(block, index);
            });
        }

        function updateQuestionIndexInNames(questionBlock, newIndex) {
            // Update question text name
            const questionText = questionBlock.querySelector('textarea[name*="Questions"]');
            questionText.name = `Questions[${newIndex}].QuestionText`;

            // Update correct answer index name
            const radioButtons = questionBlock.querySelectorAll('input[type="radio"]');
            radioButtons.forEach(radio => {
                radio.name = `Questions[${newIndex}].CorrectAnswerIndex`;
            });

            // Update answer text and order names
            const answers = questionBlock.querySelectorAll('.answer-row');
            answers.forEach((answer, answerIndex) => {
                const answerText = answer.querySelector('input[name*="AnswerText"]');
                const orderInput = answer.querySelector('input[name*="Order"]');

                answerText.name = `Questions[${newIndex}].Answers[${answerIndex}].AnswerText`;
                orderInput.name = `Questions[${newIndex}].Answers[${answerIndex}].Order`;
                orderInput.value = answerIndex;
            });
        }

        function updateAnswerIndexes(questionBlock) {
            const questionIndex = Array.from(document.querySelectorAll('.question-block')).indexOf(questionBlock);
            const answers = questionBlock.querySelectorAll('.answer-row');

            answers.forEach((answer, index) => {
                const radio = answer.querySelector('input[type="radio"]');
                const answerText = answer.querySelector('input[name*="AnswerText"]');
                const orderInput = answer.querySelector('input[name*="Order"]');

                radio.value = index;
                answerText.name = `Questions[${questionIndex}].Answers[${index}].AnswerText`;
                orderInput.name = `Questions[${questionIndex}].Answers[${index}].Order`;
                orderInput.value = index;
            });
        }

        function updateAllQuestionsIndexes() {
            document.querySelectorAll('.question-block').forEach((block, index) => {
                updateQuestionIndexInNames(block, index);
            });
        }


        document.getElementById('testFileInput').addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function (e) {
                const content = e.target.result;
                parseTestFile(content);
            };
            reader.readAsText(file);
        });

        function parseTestFile(content) {
            // Clear existing questions
            document.getElementById('questions-container').innerHTML = '';

            const lines = content.split('\n');
            let currentQuestion = null;
            let answers = [];
            let correctAnswerIndex = 0;

            // Parse test metadata
            for (let line of lines) {
                line = line.trim();

                if (line.startsWith('Test Ady:')) {
                    document.querySelector('[name="Name"]').value = line.replace('Test Ady:', '').trim();
                }
                else if (line.startsWith('Ders:')) {
                    const type = line.replace('Ders:', '').trim();
                    document.querySelector('[name="Type"]').value = type.replace('[', '').replace(']', '');
                }
                else if (line.startsWith('Giňişleýin:')) {
                    document.querySelector('[name="Description"]').value = line.replace('Giňişleýin:', '').trim();
                }
                else if (line.startsWith('Dereje:')) {
                    const level = line.replace('Dereje:', '').trim();
                    document.querySelector('[name="Level"]').value = level.replace('[', '').replace(']', '');
                }
                else if (line.startsWith('Wagty:')) {
                    const time = line.replace('Wagty:', '').replace('[', '').replace(']', '').replace('minutlarda', '').trim();
                    document.querySelector('[name="TimeLimit"]').value = time;
                }
                else if (line.match(/^Sorag \d+:/)) {
                    if (currentQuestion) {
                        // Add previous question
                        addQuestionWithAnswers(currentQuestion, answers, correctAnswerIndex);
                        answers = [];
                    }
                    currentQuestion = line.replace(/^Sorag \d+:/, '').trim();
                }
                else if (line.match(/^[A-D]\)/)) {
                    const answer = line.substring(3).trim();
                    const isCorrect = line.includes('←');
                    if (isCorrect) {
                        correctAnswerIndex = answers.length;
                    }
                    answers.push(answer.replace('←', '').replace('Dogry Jogap', '').trim());
                }
            }

            // Add the last question
            if (currentQuestion && answers.length > 0) {
                addQuestionWithAnswers(currentQuestion, answers, correctAnswerIndex);
            }
        }

        function addQuestionWithAnswers(questionText, answers, correctAnswerIndex) {
            addQuestion();

            const questionBlocks = document.querySelectorAll('.question-block');
            const lastQuestion = questionBlocks[questionBlocks.length - 1];
            const questionIndex = questionBlocks.length - 1;

            // Set question text
            lastQuestion.querySelector('textarea[name$="].QuestionText"]').value = questionText;

            // Remove default answer row
            const answersContainer = lastQuestion.querySelector('.answers-container');
            answersContainer.innerHTML = '';

            // Add answers
            answers.forEach((answer, index) => {
                const answerHtml = `
                    <div class="answer-row d-flex align-items-center mb-2">
                        <div class="form-check mr-2 d-flex align-items-center">
                            <input type="radio"
                                   name="Questions[${questionIndex}].CorrectAnswerIndex"
                                   value="${index}"
                                   ${index === correctAnswerIndex ? 'checked' : ''}
                                   class="form-check-input" />
                        </div>
                        <div class="flex-grow-1">
                            <input name="Questions[${questionIndex}].Answers[${index}].AnswerText"
                                   class="form-control"
                                   placeholder="Jogap warianty"
                                   value="${answer}" />
                            <input type="hidden"
                                   name="Questions[${questionIndex}].Answers[${index}].Order"
                                   value="${index}" />
                        </div>
                        <button type="button"
                                class="btn btn-danger btn-sm ml-2"
                                onclick="removeAnswer(this)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                            </svg>
                        </button>
                    </div>`;
                answersContainer.insertAdjacentHTML('beforeend', answerHtml);
            });
        }


        document.getElementById('testFileInput').addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (!file) return;

            // Show selected file name
            const selectedFileElement = document.querySelector('.selected-file');
            selectedFileElement.textContent = `Saýlanan faýl: ${file.name}`;
            selectedFileElement.style.display = 'block';

            const reader = new FileReader();
            reader.onload = function (e) {
                const content = e.target.result;
                parseTestFile(content);
            };
            reader.readAsText(file);
        });

        // Add drag and drop support
        const uploadCard = document.querySelector('.file-upload-card');

        uploadCard.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadCard.style.borderColor = '#0d6efd';
            uploadCard.style.backgroundColor = '#f1f8ff';
        });

        uploadCard.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadCard.style.borderColor = '#dee2e6';
            uploadCard.style.backgroundColor = '#f8f9fa';
        });

        uploadCard.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadCard.style.borderColor = '#dee2e6';
            uploadCard.style.backgroundColor = '#f8f9fa';

            const file = e.dataTransfer.files[0];
            if (file && file.name.endsWith('.txt')) {
                document.getElementById('testFileInput').files = e.dataTransfer.files;

                // Show selected file name
                const selectedFileElement = document.querySelector('.selected-file');
                selectedFileElement.textContent = `Saýlanan faýl: ${file.name}`;
                selectedFileElement.style.display = 'block';

                const reader = new FileReader();
                reader.onload = function (e) {
                    const content = e.target.result;
                    parseTestFile(content);
                };
                reader.readAsText(file);
            }
        });
    </script>
}

