@model TestProgrammasy.DTOs.TestDTO
@{
    ViewData["Title"] = "Test: " + Model.Name;
}

<div class="test-container">
    <div class="test-header">
        <h2>@Model.Name</h2>
        @if (Model.TimeLimit > 0)
        {
            <div class="timer" id="timer" data-time="@Model.TimeLimit"></div>
        }
    </div>

    <div id="confirmationModal" class="modal">
        <div class="modal-content">
            <h3>Tassyklama</h3>
            <p>Bu testi başlamak isleýärsiňizmi? Wagtyňyz başlanda yzyna dolanyp bolmaýar.</p>
            <div class="modal-buttons">
                <button id="confirmStart" class="btn btn-primary">Hawa</button>
                <button id="cancelStart" class="btn btn-secondary">Ýok</button>
            </div>
        </div>
    </div>

    <div id="testContent" style="display: none;">
        <div class="question-container">
            <div id="currentQuestion"></div>
            <div class="navigation-buttons">
                <button id="nextQuestion" class="btn btn-primary">Indiki Sorag</button>
                <button id="skipQuestion" class="btn btn-secondary">Bökmek</button>
                <button id="completeTest" class="btn btn-success" style="display: none;">Testi tamamla</button>
            </div>
        </div>

        <div class="progress-info">
            <span>Jogaplanan: <span id="answeredCount">0</span>/@Model.Questions.Count</span>
        </div>
    </div>
</div>

    <style>
        .test-container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .test-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 15px;
            border-bottom: 2px solid #eee;
            margin-bottom: 20px;
        }

        .timer {
            font-size: 1.2em;
            font-weight: bold;
            color: #dc3545;
            padding: 10px;
            border-radius: 5px;
            background: #fff3f3;
        }

        .question-container {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .answer-option {
            display: block;
            padding: 12px 15px;
            margin: 10px 0;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
        }

            .answer-option:hover {
                background-color: #e9ecef;
                border-color: #adb5bd;
            }

            .answer-option.selected {
                background-color: #cfe2ff;
                border-color: #0d6efd;
            }

        .navigation-buttons {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .modal-content {
            background: white;
            padding: 25px;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            margin: 15% auto;
        }

        .modal-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }

        .progress-info {
            text-align: center;
            margin: 15px 0;
            font-size: 1.1em;
        }

        .loading-message {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.9);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        @@media (max-width: 768px) {
            .test-container

        {
            margin: 10px;
            padding: 15px;
        }

        .navigation-buttons {
            flex-direction: column;
        }

        }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    </style>


@section Scripts {
    <script>
        // Sahypany refresh etmegi duruzmak
        history.pushState(null, null, location.href);
        window.onpopstate = function () {
            history.go(1);
        };

        let currentQuestionIndex = 0;
        let questions = @Html.Raw(Json.Serialize(Model.Questions));
        let answers = {};
        let timerInterval;
        let remainingTime = 0; // Add this as a global variable
        let skippedQuestions = []; // Add this new array



        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('confirmationModal').style.display = 'block';

            

            document.getElementById('confirmStart').addEventListener('click', function() {
                document.getElementById('confirmationModal').style.display = 'none';
                document.getElementById('testContent').style.display = 'block';
                  // Start timer only after confirmation
        const timerElement = document.getElementById('timer');
        if (timerElement) {
            const timeLimit = parseInt(timerElement.dataset.time) * 60;
            startTimer(timeLimit);
        }
        loadQuestion(currentQuestionIndex);
            });

            document.getElementById('cancelStart').addEventListener('click', function() {
                window.location.href = '/Tests';
            });

            document.getElementById('nextQuestion').addEventListener('click', handleNextQuestion);
            document.getElementById('skipQuestion').addEventListener('click', handleSkipQuestion);
            document.getElementById('completeTest').addEventListener('click', completeTest);
        });
               

        function startTimer(timeLimit) {
            let timeLeft = timeLimit;
            const timerElement = document.getElementById('timer');

            function updateTimer() {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                remainingTime = timeLeft; 
                timerElement.textContent = `Galan wagt: ${minutes}:${seconds.toString().padStart(2, '0')}`;
            }

            timerInterval = setInterval(() => {
                timeLeft--;
                updateTimer();
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    completeTest();
                }
            }, 1000);

            updateTimer();
        }

                function loadQuestion(index) {
            const question = questions[index];
            const questionContainer = document.getElementById('currentQuestion');
                const nextButton = document.getElementById('nextQuestion');

                    // Initially disable the next button
        nextButton.disabled = !answers[question.id];

                questionContainer.innerHTML = `
            <h3>Sorag ${index + 1}</h3>
            <p>${question.questionText}</p>
            <div class="answers">
                ${question.answers.map(answer => `
                    <div class="answer-option ${answers[question.id] === answer.id ? 'selected' : ''}"
                         data-answer-id="${answer.id}">
                        ${answer.answerText}
                    </div>
                `).join('')}
            </div>
        `;

                document.querySelectorAll('.answer-option').forEach(option => {
            option.addEventListener('click', function() {
                const isSelected = this.classList.contains('selected');
                document.querySelectorAll('.answer-option').forEach(opt => {
                    opt.classList.remove('selected');
                });

                if (!isSelected) {
                    this.classList.add('selected');
                    answers[question.id] = parseInt(this.dataset.answerId);
                    nextButton.disabled = false; // Enable next button when answer is selected
                    updateAnsweredCount();
                } else {
                    delete answers[question.id];
                    nextButton.disabled = true; // Disable next button when answer is deselected
                    updateAnsweredCount();
                }
            });
        });

        updateNavigationButtons();
        }

        function handleNextQuestion() {
            const selectedOption = document.querySelector('.answer-option.selected');
            if (selectedOption) {
                const questionId = questions[currentQuestionIndex].id;
                const answerId = parseInt(selectedOption.dataset.answerId);
                saveAnswer(questionId, answerId);
            }

            if (currentQuestionIndex < questions.length - 1) {
                currentQuestionIndex++;
                loadQuestion(currentQuestionIndex);
            }
        }
                async function saveAnswer(questionId, answerId) {
            answers[questionId] = answerId;
            updateAnsweredCount();

            try {
                const response = await fetch('/Test/SaveAnswer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ questionId, answerId })
                });
                if (!response.ok) {
                    throw new Error('Jogap ýatda saklanmady');
                }
            } catch (error) {
                console.error('Jogap ýatda saklamakda ýalňyşlyk:', error);
                throw error;
            }
        }



                function handleSkipQuestion() {
            const currentQuestion = questions[currentQuestionIndex];

                   // Diňe bökülen soraglary ýatda sakla
        if (!skippedQuestions.includes(currentQuestion)) {
            skippedQuestions.push(currentQuestion);
            questions.splice(currentQuestionIndex, 1); // Häzirki soragy aýyr

            // Eger öň jogaplanan bolsa, jogaby sakla
            if (answers[currentQuestion.id]) {
                delete answers[currentQuestion.id]; // Jogaby aýyr
                updateAnsweredCount(); // Counter-i täzele
            }
        }

            // If we've reached the end of regular questions, start showing skipped ones
            if (currentQuestionIndex >= questions.length && skippedQuestions.length > 0) {
                questions = questions.concat(skippedQuestions);
                skippedQuestions = [];
            }

            // If we still have questions to show
            if (currentQuestionIndex < questions.length) {
                loadQuestion(currentQuestionIndex);
            }
        }

                function updateAnsweredCount() {
            const count = Object.keys(answers).length;
            const totalQuestions = questions.length + skippedQuestions.length;
            document.getElementById('answeredCount').textContent = count;

            // Only show complete button if all questions are answered
            const completeButton = document.getElementById('completeTest');
            if (count === totalQuestions) {
                completeButton.style.display = 'block';
            } else {
                completeButton.style.display = 'none';
            }

            updateNavigationButtons();
        }

                   function updateNavigationButtons() {
            const nextButton = document.getElementById('nextQuestion');
            const skipButton = document.getElementById('skipQuestion');
            const completeButton = document.getElementById('completeTest');

            // Get total number of questions including skipped ones
            const totalQuestions = questions.length + skippedQuestions.length;
            // Get number of answered questions
            const answeredQuestions = Object.keys(answers).length;

            if (currentQuestionIndex === questions.length - 1) {
                // Last question
                if (answeredQuestions === totalQuestions) {
                    // All questions are answered
                    nextButton.style.display = 'none';
                    skipButton.style.display = 'none';
                    completeButton.style.display = 'block';
                } else {
                    // Not all questions are answered yet
                    nextButton.style.display = 'block';
                    skipButton.style.display = 'block';
                    completeButton.style.display = 'none';
                }
            } else {
                // Not the last question
                nextButton.style.display = 'block';
                skipButton.style.display = 'block';
                completeButton.style.display = 'none';
            }
        }

                       async function completeTest() {
            try {
                // Save the last answer if selected
                const selectedOption = document.querySelector('.answer-option.selected');
                if (selectedOption) {
                    const questionId = questions[currentQuestionIndex].id;
                    const answerId = parseInt(selectedOption.dataset.answerId);
                    await saveAnswer(questionId, answerId); // Wait for the answer to be saved
                }

                clearInterval(timerInterval);
                showLoadingMessage();

                const response = await fetch('/Test/CompleteTest', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(
                         remainingTime
                 )
                });
                if (response.ok) {
                    const data = await response.json();
                    window.location.href = data.redirectUrl;
                } else {
                    throw new Error('Test tamamlanmady');
                }
            } catch (error) {
                console.error('Ýalňyşlyk:', error);
                alert('Test tamamlanmady. Täzeden synanyşyň.');
            }
        }

        function showLoadingMessage() {
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'loading-message';
            loadingDiv.innerHTML = `
                <div class="spinner"></div>
                <p>Netijäňiz hasaplanýar, haýyş edýäris garaşyň...</p>
            `;
            document.body.appendChild(loadingDiv);
        }
    </script>
}